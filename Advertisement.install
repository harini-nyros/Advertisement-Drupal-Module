<?php


/**
 * Implements hook_schema().
 */


function Advertisement_schema() {

$schema['advertisement_clicks'] = array(
  'description' => 'This table store advertisement clicks',
    'fields' => array(
      'aid'  => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Ad ID',
      ),
    'nid'  => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Node ID',
      ),
    'ccount'  => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Click count',
      ),
     ),
  'primary key' => array('aid'),
    'indexes' => array(
      'nid' => array('nid'),
      'aid' => array('aid'),
    ),
  );
 return $schema;
}


/**
 * Implements hook_install()
 */

function Advertisement_install()
{

	 $t = get_t();

	 $type = array(
	    'type' => 'advertisement',
	    'name' => $t('Add Advertisement'),
	    'base' => 'node_content',
	    'description' => $t('Advertisement'),
	    'custom' => 1,
	    'modified' => 1,
	    'locked' => 0,
	  );

	  $type = node_type_set_defaults($type);
	  node_type_save($type);

	   $vocabulary = (object) array(
	    'name' => $t('Advertisement space'),
	    'description' => $t('Advertisement space'),
	    'machine_name' => 'ad_spaces',
	    'help' => '',
	  );
	  taxonomy_vocabulary_save($vocabulary);

	  $ad_spaces = array(
	    $t('Home Page'), $t('Products Listing Page'),$t('Products Details page'),
	  );

	  $query = db_select('taxonomy_vocabulary', 'tv');
	  $query->fields('tv', array('vid'));
	  $query->condition('tv.machine_name','ad_spaces', '=');
	  $result = $query->execute();
	  $data = $result->fetchAssoc();
	  $vid = $data['vid'];

	  foreach ($ad_spaces as $name) {
					    $term = new stdClass;
					    $term->name = $name;
					    $term->vid = $vid;
					    taxonomy_term_save($term);
	  				}
	  foreach (advertisement_installed_fields() as $field) 
	  {
	     field_create_field($field);
	  }
	   $instance = array(
	    'field_name' => 'field_ad_text',
	    'entity_type' => 'node',
	    'label' => $t('Enter Text'),
	    'bundle' => 'Advertisement',
	    'description' => $t('Enter your text for your advertisement'),
	    'required' => True,
	    'settings' => array(
	      'rows' => 5,
	      'text_processing' => 1,
	    ),

	    'widget' => array(
	      'type' => 'text_textarea',
	      'settings' => array(
	      ),
	      'weight' => 0,
	      'module' => 'text',
	    ),

	    'display' => array(
	      'default' => array(
		'label' => 'hidden',
		'type' => 'text_default',
		'weight' => -1,
		'module' => 'text',
	      ),
	      'teaser' => array(
		'label' => 'hidden',
		'type' => 'text_default',
		'weight' => -1,
	      ),
	    ),
	  );
	  field_create_instance($instance);
	    $instance = array(
	    'field_name' => 'field_ad_image',
	    'entity_type' => 'node',
	    'label' => $t('Advertisement Image'),
	    'bundle' => 'Advertisement',
	    'description' => $t('Upload an image for this Advertisement.'),
	    'required' => FALSE,

	    'settings' => array(
	      'file_directory' => 'field/image',
	      'file_extensions' => 'png gif jpg jpeg',
	      'max_filesize' => '',
	      'max_resolution' => '',
	      'min_resolution' => '',
	      'alt_field' => TRUE,
	      'title_field' => '',
	    ),

	    'widget' => array(
	      'type' => 'image_image',
	      'settings' => array(
		'progress_indicator' => 'throbber',
		'preview_image_style' => 'thumbnail',
	      ),
	      'weight' => -2,
	    ),

	    'display' => array(
	      'default' => array(
		'label' => 'hidden',
		'type' => 'image',
		'settings' => array('image_style' => 'large', 'image_link' => ''),
		'weight' => -1,
	      ),
	      'teaser' => array(
		'label' => 'hidden',
		'type' => 'image',
		'settings' => array('image_style' => 'medium', 'image_link' => 'content'),
		'weight' => -1,
	      ),
	    ),
	  );
	  field_create_instance($instance); 
   
	  $instance = array(
	    'field_name' => 'field_ad_category',
	    'entity_type' => 'node',
	    'label' => $t('Advertisement spaces'),
	    'bundle' => 'Advertisement',
	    'required' => TRUE,
	    'widget' => array(
	      'type' => 'options_select',
	      'weight' => -4,
	    ),
	    'display' => array(
	      'default' => array('type' => 'hidden'),
	      'teaser' => array('type' => 'hidden')
	    ),
	  );
	  field_create_instance($instance);

	   $instance = array(
	    'field_name' => 'field_ad_end_date',
	    'entity_type' => 'node',
	    'bundle' => 'Advertisement',
	    'label' => $t('End Date'),
	    'description' => $t('Allowed date formats mm/dd/yyyy. The start date will be today date'),
	    'required' => True,
	    'widget' => array(
	      'type' => 'text_textfield',
	      'settings' => array(
		'size' => 60,
	      ),
	      'weight' => 4,
	    ),
	    'settings' => array(
	      'text_processing' => 0,
	    ),
	    'display' => array(
	      'default' => array(
		'label' => 'above',
		'type' => 'text_default',
		'settings' => array(),
	      ),
	    ),
	  );
	  field_create_instance($instance);


	  $instance = array(
	    'field_name' => 'field_ad_status',
	    'entity_type' => 'node',
	    'bundle' => 'Advertisement',
	    'label' => $t('Status'),
	    'description' => $t('Please use this field to show or hide ads even if the ad is active and published.'),
	    'required' => FALSE,
	    'widget' => array(
	      'type' => 'options_onoff',
	      'settings' => array(
		'display_label' => 0,
	      ),
	      'weight' => 5,
	      'module' => 'options',
	    ),
	    'default_value' => array(
	      0 => array(
		'value' => 1,
	      ),
	    ),
	    'settings' => array(
	      'user_register_form' => FALSE,
	    ),
	    'display' => array(
	      'default' => array(
		'label' => 'above',
		'type' => 'list_default',
		'module' => 'list',
		'settings' => array(),
	      ),
	      'teaser' => array(
		'label' => 'above',
		'settings' => array(),
		'type' => 'hidden',
		'weight' => 0,
	      ),
	    ),
	  );
	  field_create_instance($instance);  

}
/**
 * Implements hook_install()
 */
function advertisement_installed_fields() {
  $t = get_t();
  $fields = array(
   array(
      'field_name' => 'field_ad_text',
      'type' => 'text_long',
      'cardinality' => 1,
      'translatable' => TRUE,
      'locked' => FALSE,
      'settings' => array(),
    ),
    array(
      'field_name' => 'field_ad_category',
      'type' => 'taxonomy_term_reference',
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => 'ad_spaces',
            'parent' => 0
          ),
        ),
      ),
    ),
    array(
      'field_name' => 'field_ad_image',
      'type' => 'image',
      'cardinality' => 1,
      'translatable' => TRUE,
      'locked' => FALSE,
      'indexes' => array('fid' => array('fid')),
      'settings' => array(
        'uri_scheme' => 'public',
        'default_image' => FALSE,
      ),
    ),
    array(
      'field_name' => 'field_ad_end_date',
      'type' => 'text',
      'cardinality' => 1,
      'translatable' => TRUE,
      'settings' => array(
        'max_length' => 255,
      ),
      'translatable' => TRUE,
      'entity_types' => array(),
    ),
  array(
      'field_name' => 'field_ad_status',
      'type' => 'list_boolean',
      'cardinality' => 1,
      'translatable' => TRUE,
      'settings' => array(
        'allowed_values' => array(
          0 => $t('This ad is inactive'),
          1 => $t('This ad is active'),
        ),
        'allowed_values_function' => '',
      ),
      'translatable' => TRUE,
      'entity_types' => array(),
    ),
    );



  return $fields;
}




/**
 * Implements hook_uninstall()
 */
function Advertisement_uninstall()
{
  /**********Deleting fields***********/
	$sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'advertisement'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
 
  // Delete all the nodes at once
  node_delete_multiple($nids);

  field_delete_field('field_ad_image');
  field_delete_field('field_ad_text');
  field_delete_field('field_ad_category');
  field_delete_field('field_ad_end_date');
  field_delete_field('field_ad_status');
  node_type_delete('advertisement');
  $vid = db_select('taxonomy_vocabulary', 'tv')
  ->fields('tv', array('vid'))
  ->condition('machine_name', 'ad_spaces')
  ->execute()
  ->fetchField();
  taxonomy_vocabulary_delete($vid);
    field_purge_batch(1000);
  
}

/**
 * Implements hook_uninstall()
 */
function Advertisement_disable() {

  // Disable content type MyContentType
  disable_content_type('advertisement');

  //Activation message
  drupal_set_message(t('Advertisement is now disabled on your site.'));
}
